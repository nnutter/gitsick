#!/bin/bash

# gitsick - Store your dotfiles in Git without symlinks.
# Add this somewhere in your PATH.

GITSICK=$(basename $0)

usage() {
    echo -n "\
$GITSICK init [NAME]
$GITSICK clone <name> <url>
$GITSICK <name> <subcommand>
"
}

main() {
    if [ $# -eq 0 ]; then
        set -- -h
    fi
    for ARG in "$@"; do
        case "$ARG" in
            -h|--help) usage; exit ;;
        esac
    done

    init_git_work_tree

    set -o nounset

    case "$1" in
        init)
            shift
            local NAME="$1"
            shift
            init_git_dir "$NAME"
            git_init "$@"
            exit $?
            ;;
        clone)
            shift
            local NAME="$1"
            shift
            init_git_dir "$NAME"
            git_clone "$1"
            exit $?
            ;;
    esac

    local NAME="$1"
    shift

    init_git_dir "$NAME"

    command="$1"
    shift
    case "$command" in
        *) git_cmd "$command" "$@" ;;
    esac
}

die() {
    echo >&2 "$*"
    exit 1
}

init_git_work_tree() {
    if [ -z "$GIT_WORK_TREE" ]; then
        GIT_WORK_TREE="$GITSICK_HOME"
    fi

    if [ -z "$GIT_WORK_TREE" ]; then
        GIT_WORK_TREE="$HOME"
    fi

    if [ -e "$GIT_WORK_TREE/.git" ]; then
        die "ERROR: GIT_WORK_TREE looks like a Git repository!"
    fi
}

init_gitsick_dir() {
    if [ -z "$GITSICK_DIR" ]; then
        GITSICK_DIR="$(git config --global gitsick.dir || true)"
    fi

    if [ -z "$GITSICK_DIR" ]; then
        GITSICK_DIR="$HOME/.gitsick"
    fi

    if [ ! -d "$GITSICK_DIR" ]; then
        mkdir "$GITSICK_DIR"
    fi
}

init_git_dir() {
    local NAME="$1"
    GIT_DIR="$GITSICK_DIR/$NAME.git"
}

git_init() {
    git init --separate-git-dir "$GIT_DIR" "$GIT_WORK_TREE" "$@"
    if [ -f "$GIT_WORK_TREE/.git" ]; then
        rm "$GIT_WORK_TREE/.git"
    fi
}

git_clone() {
    local HTTPS_URL="$1"

    if ! test -d "$GIT_DIR"
    then
        git clone --bare "$HTTPS_URL" "$GIT_DIR"
    fi

    (
        git --work-tree "$GIT_WORK_TREE" --git-dir "$GIT_DIR" reset --mixed master > /dev/null
        git --work-tree "$GIT_WORK_TREE" --git-dir "$GIT_DIR" ls-files --modified -z | while read -d $'\0' -r FILE
        do
            FILE="$GIT_WORK_TREE/$FILE"
            if test -f "$FILE"
            then
                if test -f "$FILE.bak"
                then
                    echo "$0: cannot backup file: $File"
                    exit 1
                fi
                mv --verbose --no-clobber "$FILE" "$FILE.bak"
            fi
        done
        git --work-tree "$GIT_WORK_TREE" --git-dir "$GIT_DIR" reset --hard master > /dev/null
    )
}

git_cmd() {
    if [ ! -d "$GIT_DIR" ]; then
        die "ERROR: No $GITSICK repo found: $GIT_DIR"
    fi

    if [ "$1" == "status" ]; then
        shift
        git --git-dir=$GIT_DIR --work-tree=$GIT_WORK_TREE \
            status --untracked-files=no "$@"
    else
        git --git-dir=$GIT_DIR --work-tree=$GIT_WORK_TREE "$@"
    fi
}

set -o errexit
set -o pipefail

init_gitsick_dir
main "$@"
